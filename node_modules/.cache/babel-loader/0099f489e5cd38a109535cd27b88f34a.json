{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyAImcK8GbaanJc7YVFUEaeRDlnogcVEF3c\",\n  authDomain: \"crwn-db-e00b1.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-e00b1.firebaseio.com\",\n  projectId: \"crwn-db-e00b1\",\n  storageBucket: \"crwn-db-e00b1.appspot.com\",\n  messagingSenderId: \"1057338552185\",\n  appId: \"1:1057338552185:web:aee36a760e7f34f12389a8\",\n  measurementId: \"G-EZ4R7WGE8Z\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef); // batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  props: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Tharun S/crwn/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","props","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACfC,EAAAA,MAAM,EAAE,yCADO;AAEfC,EAAAA,UAAU,EAAE,+BAFG;AAGfC,EAAAA,WAAW,EAAE,sCAHE;AAIfC,EAAAA,SAAS,EAAE,eAJI;AAKfC,EAAAA,aAAa,EAAE,2BALA;AAMfC,EAAAA,iBAAiB,EAAE,eANJ;AAOfC,EAAAA,KAAK,EAAE,4CAPQ;AAQfC,EAAAA,aAAa,EAAE;AARA,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAE,OAAOC,QAAP,EAAiBC,cAAjB,KAAmC;AACzE,MAAG,CAACD,QAAJ,EAAc;AAEZ,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEF,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAoB;AAChB,UAAK;AAACC,MAAAA,WAAD;AAAaC,MAAAA;AAAb,QAAsBV,QAA3B;AACA,UAAMW,SAAS,GAAE,IAAIC,IAAJ,EAAjB;;AACA,QAAG;AACD,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOC,OAAMa,KAAN,EAAY;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACJ;;AACD,SAAOf,OAAP;AACD,CAtBM;AAwBP,OAAO,MAAMgB,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,YAAtB,KAAuC;AAE9E,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AAEA,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AACFH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYU,SAAZ,EAFwB,CAGxB;AACD,GAJH;AAME,SAAO,MAAMH,KAAK,CAACI,MAAN,EAAb;AACD,CAZM;AAePtC,QAAQ,CAACuC,aAAT,CAAuBtC,MAAvB;AAEA,OAAO,MAAMuC,IAAI,GAAGxC,QAAQ,CAACwC,IAAT,EAAb;AACP,OAAO,MAAM1B,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAM2B,QAAQ,GAAG,IAAIzC,QAAQ,CAACwC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,KAAK,EAAC;AAAP,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAE,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA9B;AACP,eAAezC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\napiKey: \"AIzaSyAImcK8GbaanJc7YVFUEaeRDlnogcVEF3c\",\r\nauthDomain: \"crwn-db-e00b1.firebaseapp.com\",\r\ndatabaseURL: \"https://crwn-db-e00b1.firebaseio.com\",\r\nprojectId: \"crwn-db-e00b1\",\r\nstorageBucket: \"crwn-db-e00b1.appspot.com\",\r\nmessagingSenderId: \"1057338552185\",\r\nappId: \"1:1057338552185:web:aee36a760e7f34f12389a8\",\r\nmeasurementId: \"G-EZ4R7WGE8Z\"\r\n};\r\n\r\nexport const createUserProfileDocument= async (userAuth, additionalData) =>{\r\n  if(!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n    const snapShot = await userRef.get();\r\n\r\n  if(!snapShot.exists){\r\n      const{displayName,email} = userAuth;\r\n      const createdAt =new Date();\r\n      try{\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          ...additionalData\r\n        })\r\n      }catch(error){\r\n        console.log('error creating user', error.message);\r\n      }\r\n  }\r\n  return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n\r\n  const collectionRef = firestore.collection(collectionKey);\r\n\r\n  const batch = firestore.batch();\r\nobjectsToAdd.forEach(obj => {\r\n    const newDocRef = collectionRef.doc();\r\n    console.log(newDocRef);\r\n    // batch.set(newDocRef, obj);\r\n  });\r\n\r\n  return await batch.commit();\r\n};\r\n\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({props:\"select_account\"});\r\nexport const signInWithGoogle =() => auth.signInWithPopup(provider);\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}