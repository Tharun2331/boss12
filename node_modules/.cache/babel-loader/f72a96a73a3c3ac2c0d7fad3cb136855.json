{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { SignInSuccess, SignInFailure } from \"./user.actions\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/Tharun S/crwn/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","SignInSuccess","SignInFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","userAuth","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,GAAnB,EAAuBC,GAAvB,EAA2BC,IAA3B,QAAsC,oBAAtC;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,aAAR,EAAsBC,aAAtB,QAA0C,gBAA1C;AACA,SAAQC,IAAR,EAAaC,cAAb,EAA4BC,yBAA5B,EAAsDC,cAAtD,QAA4E,+BAA5E;AAEA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAG;AACD,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAML,IAAI,CAACM,eAAL,CAAqBL,cAArB,CAArB;AACA,UAAMM,OAAO,GAAG,MAAMX,IAAI,CAACM,yBAAD,EAA2BG,IAA3B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMf,GAAG,CAACI,aAAa,CAAC;AAACY,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CAAd,CAAT;AACD,GALD,CAKE,OAAMC,KAAN,EAAa;AACX,UAAMlB,GAAG,CAACK,aAAa,CAACa,KAAD,CAAd,CAAT;AACH;AACF;AAED,OAAO,UAAUC,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAClE,MAAG;AACA,UAAM;AAACX,MAAAA;AAAD,QAAS,MAAML,IAAI,CAACiB,0BAAL,CAAgCF,KAAhC,EAAsCC,QAAtC,CAArB;AACA,UAAMT,OAAO,GAAG,MAAMX,IAAI,CAACM,yBAAD,EAA2BG,IAA3B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMf,GAAG,CAACI,aAAa,CAAC;AAACY,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CAAd,CAAT;AACD,GALF,CAKG,OAAMC,KAAN,EAAa;AACX,UAAMlB,GAAG,CAACK,aAAa,CAACa,KAAD,CAAd,CAAT;AACJ;AACD;AACD,OAAO,UAAUM,mBAAV,GAAgC;AACpC,MAAI;AACC,UAAMC,QAAQ,GAAG,MAAMhB,cAAc,EAArC;AACJ,GAFD,CAEE,OAAMS,KAAN,EAAa;AACb,UAAMlB,GAAG,CAACK,aAAa,CAACa,KAAD,CAAd,CAAT;AACD;AACH;AAED,OAAO,UAAUQ,mBAAV,GAAgC;AACrC,QAAM3B,UAAU,CAACI,eAAe,CAACwB,oBAAjB,EAAsCjB,gBAAtC,CAAhB;AACD;AAED,OAAO,UAAUkB,kBAAV,GAA+B;AACpC,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,mBAAjB,EAAqCV,eAArC,CAAhB;AACD;AACD,OAAO,UAAUW,kBAAV,GAA+B;AACpC,QAAM/B,UAAU,CAACI,eAAe,CAAC4B,kBAAjB,EAAoCP,mBAApC,CAAhB;AACD;AAGD,OAAO,UAAUQ,SAAV,GAAsB;AAC3B,QAAM/B,GAAG,CAAC,CAACC,IAAI,CAACwB,mBAAD,CAAL,EAA2BxB,IAAI,CAAC0B,kBAAD,CAA/B,CAAD,CAAT;AACD","sourcesContent":["import {takeLatest,put,all,call} from \"redux-saga/effects\";\r\n\r\nimport UserActionTypes from \"./user.types\";\r\nimport {SignInSuccess,SignInFailure} from \"./user.actions\";\r\nimport {auth,googleProvider,createUserProfileDocument,getCurrentUser } from \"../../firebase/firebase.utils\"\r\n\r\nexport function* signInWithGoogle() {\r\n  try{\r\n    const {user} = yield auth.signInWithPopup(googleProvider)\r\n    const userRef = yield call(createUserProfileDocument,user)\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(SignInSuccess({id: userSnapshot.id, ...userSnapshot.data() }))\r\n  } catch(error) {\r\n      yield put(SignInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n try{\r\n    const {user} = yield auth.signInWithEmailAndPassword(email,password);\r\n    const userRef = yield call(createUserProfileDocument,user);\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(SignInSuccess({id: userSnapshot.id, ...userSnapshot.data() }))\r\n  } catch(error) {\r\n      yield put(SignInFailure(error));\r\n }\r\n}\r\nexport function* isUserAuthenticated() {\r\n   try {\r\n        const userAuth = yield getCurrentUser();\r\n   } catch(error) {\r\n     yield put(SignInFailure(error));\r\n   }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail);\r\n}\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated)\r\n}\r\n\r\n\r\nexport function* userSagas() {\r\n  yield all([call(onGoogleSignInStart),call(onEmailSignInStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}